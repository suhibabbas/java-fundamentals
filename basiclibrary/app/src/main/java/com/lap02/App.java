/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.lap02;

import java.util.Random;
import java.util.Arrays;

public class App {

    public static void main(String[] args) {

//        int[] x =  roll(5);
//        for (int vla:x ){
//            System.out.println(vla);
//        }
//
//        System.out.println(containsDuplicates(x));
        int[] x = {1,3,5,4,6,1};
        System.out.println(calculatingAverages(x));
//        int[][] arr = {
//                {66, 64, 58, 65, 71, 57, 60},
//                {57, 65, 65, 70, 72, 65, 51},
//                {55, 54, 60, 53, 59, 57, 61},
//                {65, 56, 55, 52, 55, 62, 57}
//        };
//
//        System.out.println(arraysAverages(arr));
    }

    public static int[] roll(int n) {
        Random rn = new Random();
        int[] array = new int[5];

        for (int index = 0; index < n; index++) {
            int dice = rn.nextInt(6) + 1;
            array[index] = dice;

        }
        return array;
    }

    public static boolean containsDuplicates(int[] array){
        int count =0;
        int currentVal =0;
         Arrays.sort(array);
        for (int val:array ){
            if (currentVal == val){
                count++;
            }
            currentVal =val;
        }

        return count > 0;
    }

    public static int calculatingAverages(int[] array){
        int average;
        int sum =0;
        for (int val:array
             ) {
            sum +=val;
        }
        average = sum/array.length;
        return average;
    }

    public static int arraysAverages(int[][] arrays){
        int[] averages = new int[arrays.length];
        int count = 0;
        int count2 =0;

        for (int[] arr :arrays
             ) {
            for (int val:arr
                 ) {
                count += val;
            }
            averages[count2] = count/arr.length;
            count2++;
            count =0;

        }
        int average =0;
       for (int index =1; index<averages.length;index++){

           average = Math.min(averages[index - 1], averages[index]);
       }
       return average;
    }

}

